#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const cookie = require("cookie")
const jwt = require("jsonwebtoken");
const http = require("http");
const db = require("../db");
const {
  addOnlineUser,
  checkOnlineUser,
  getSocketId,
  offlineUser,
} = require("../onlineUsers");
const { Conversation } = require("../db/models");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

//add cors to socket server, localhost is the origin address
const io = require("socket.io")(server);

// use jwt to verify token to avid invalid user sending messages
io.use((socket, next) => {
  if (socket.handshake.headers.cookie) {
    //remove the head string of token
    const token = cookie.parse(socket.handshake.headers.cookie)["messenger-token"];

    jwt.verify(token, process.env.SESSION_SECRET, (err, decoded) => {
      if (err) next(new Error("not authorized"));

      next();
    });
  }
});

io.on("connection", (socket) => {
  socket.on("go-online", (id) => {
    if (!checkOnlineUser(id)) {
      addOnlineUser(id, socket.id);
    }
    // send the user who just went online to everyone else who is already online
    joinRoom(socket, id);
  });

  socket.on("new-message", (data) => {
    sendMessage(io, socket, data);
  });

  socket.on("logout", (id) => {
    if (checkOnlineUser(id)) {
      if (offlineUser(id, socket.id)) {
        socket.rooms.forEach((room) =>
          socket.to(room).emit("remove-offline-user", id)
        );
      }
    }
  });
});

const sendMessage = (io, socket, data) => {
  const room = data.message.conversationId.toString();

  socket.join(room);
  if (checkOnlineUser(data.recipientId)) {
    let socketids = getSocketId(data.recipientId);
    socketids.forEach((socketid) => io.sockets.connected[socketid].join(room));
  }

  socket.to(room).emit("new-message", {
    message: data.message,
    sender: data.sender,
  });
};

const joinRoom = (socket, userId) => {
  Conversation.allConversations(userId)
    .then((conversations) => {
      const rooms = conversations.map((conversation) =>
        conversation.id.toString()
      );
      socket.join(rooms);

      rooms.forEach((room) => socket.to(room).emit("add-online-user", userId));
    })
    .catch((err) => console.error(err));
};

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
